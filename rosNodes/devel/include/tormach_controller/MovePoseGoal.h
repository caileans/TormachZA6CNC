// Generated by gencpp from file tormach_controller/MovePoseGoal.msg
// DO NOT EDIT!


#ifndef TORMACH_CONTROLLER_MESSAGE_MOVEPOSEGOAL_H
#define TORMACH_CONTROLLER_MESSAGE_MOVEPOSEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tormach_controller
{
template <class ContainerAllocator>
struct MovePoseGoal_
{
  typedef MovePoseGoal_<ContainerAllocator> Type;

  MovePoseGoal_()
    : goalx(0.0)
    , goaly(0.0)
    , goalz(0.0)
    , goali(0.0)
    , goalj(0.0)
    , goalk(0.0)
    , vel(0.0)
    , postol(0.0)
    , forcetol(0.0)  {
    }
  MovePoseGoal_(const ContainerAllocator& _alloc)
    : goalx(0.0)
    , goaly(0.0)
    , goalz(0.0)
    , goali(0.0)
    , goalj(0.0)
    , goalk(0.0)
    , vel(0.0)
    , postol(0.0)
    , forcetol(0.0)  {
  (void)_alloc;
    }



   typedef float _goalx_type;
  _goalx_type goalx;

   typedef float _goaly_type;
  _goaly_type goaly;

   typedef float _goalz_type;
  _goalz_type goalz;

   typedef float _goali_type;
  _goali_type goali;

   typedef float _goalj_type;
  _goalj_type goalj;

   typedef float _goalk_type;
  _goalk_type goalk;

   typedef float _vel_type;
  _vel_type vel;

   typedef float _postol_type;
  _postol_type postol;

   typedef float _forcetol_type;
  _forcetol_type forcetol;





  typedef boost::shared_ptr< ::tormach_controller::MovePoseGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tormach_controller::MovePoseGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MovePoseGoal_

typedef ::tormach_controller::MovePoseGoal_<std::allocator<void> > MovePoseGoal;

typedef boost::shared_ptr< ::tormach_controller::MovePoseGoal > MovePoseGoalPtr;
typedef boost::shared_ptr< ::tormach_controller::MovePoseGoal const> MovePoseGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tormach_controller::MovePoseGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tormach_controller::MovePoseGoal_<ContainerAllocator1> & lhs, const ::tormach_controller::MovePoseGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goalx == rhs.goalx &&
    lhs.goaly == rhs.goaly &&
    lhs.goalz == rhs.goalz &&
    lhs.goali == rhs.goali &&
    lhs.goalj == rhs.goalj &&
    lhs.goalk == rhs.goalk &&
    lhs.vel == rhs.vel &&
    lhs.postol == rhs.postol &&
    lhs.forcetol == rhs.forcetol;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tormach_controller::MovePoseGoal_<ContainerAllocator1> & lhs, const ::tormach_controller::MovePoseGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tormach_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tormach_controller::MovePoseGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tormach_controller::MovePoseGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tormach_controller::MovePoseGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9782a91330f66069042af5b1d4f2166d";
  }

  static const char* value(const ::tormach_controller::MovePoseGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9782a91330f66069ULL;
  static const uint64_t static_value2 = 0x042af5b1d4f2166dULL;
};

template<class ContainerAllocator>
struct DataType< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tormach_controller/MovePoseGoal";
  }

  static const char* value(const ::tormach_controller::MovePoseGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float32 goalx\n"
"float32 goaly\n"
"float32 goalz\n"
"float32 goali\n"
"float32 goalj\n"
"float32 goalk\n"
"float32 vel\n"
"float32 postol\n"
"float32 forcetol\n"
;
  }

  static const char* value(const ::tormach_controller::MovePoseGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goalx);
      stream.next(m.goaly);
      stream.next(m.goalz);
      stream.next(m.goali);
      stream.next(m.goalj);
      stream.next(m.goalk);
      stream.next(m.vel);
      stream.next(m.postol);
      stream.next(m.forcetol);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovePoseGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tormach_controller::MovePoseGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tormach_controller::MovePoseGoal_<ContainerAllocator>& v)
  {
    s << indent << "goalx: ";
    Printer<float>::stream(s, indent + "  ", v.goalx);
    s << indent << "goaly: ";
    Printer<float>::stream(s, indent + "  ", v.goaly);
    s << indent << "goalz: ";
    Printer<float>::stream(s, indent + "  ", v.goalz);
    s << indent << "goali: ";
    Printer<float>::stream(s, indent + "  ", v.goali);
    s << indent << "goalj: ";
    Printer<float>::stream(s, indent + "  ", v.goalj);
    s << indent << "goalk: ";
    Printer<float>::stream(s, indent + "  ", v.goalk);
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    s << indent << "postol: ";
    Printer<float>::stream(s, indent + "  ", v.postol);
    s << indent << "forcetol: ";
    Printer<float>::stream(s, indent + "  ", v.forcetol);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TORMACH_CONTROLLER_MESSAGE_MOVEPOSEGOAL_H
