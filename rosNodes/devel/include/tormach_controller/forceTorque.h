// Generated by gencpp from file tormach_controller/forceTorque.msg
// DO NOT EDIT!


#ifndef TORMACH_CONTROLLER_MESSAGE_FORCETORQUE_H
#define TORMACH_CONTROLLER_MESSAGE_FORCETORQUE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tormach_controller
{
template <class ContainerAllocator>
struct forceTorque_
{
  typedef forceTorque_<ContainerAllocator> Type;

  forceTorque_()
    : forcex(0.0)
    , forcey(0.0)
    , forcez(0.0)
    , momenti(0.0)
    , momentj(0.0)
    , momentk(0.0)  {
    }
  forceTorque_(const ContainerAllocator& _alloc)
    : forcex(0.0)
    , forcey(0.0)
    , forcez(0.0)
    , momenti(0.0)
    , momentj(0.0)
    , momentk(0.0)  {
  (void)_alloc;
    }



   typedef float _forcex_type;
  _forcex_type forcex;

   typedef float _forcey_type;
  _forcey_type forcey;

   typedef float _forcez_type;
  _forcez_type forcez;

   typedef float _momenti_type;
  _momenti_type momenti;

   typedef float _momentj_type;
  _momentj_type momentj;

   typedef float _momentk_type;
  _momentk_type momentk;





  typedef boost::shared_ptr< ::tormach_controller::forceTorque_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tormach_controller::forceTorque_<ContainerAllocator> const> ConstPtr;

}; // struct forceTorque_

typedef ::tormach_controller::forceTorque_<std::allocator<void> > forceTorque;

typedef boost::shared_ptr< ::tormach_controller::forceTorque > forceTorquePtr;
typedef boost::shared_ptr< ::tormach_controller::forceTorque const> forceTorqueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tormach_controller::forceTorque_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tormach_controller::forceTorque_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tormach_controller::forceTorque_<ContainerAllocator1> & lhs, const ::tormach_controller::forceTorque_<ContainerAllocator2> & rhs)
{
  return lhs.forcex == rhs.forcex &&
    lhs.forcey == rhs.forcey &&
    lhs.forcez == rhs.forcez &&
    lhs.momenti == rhs.momenti &&
    lhs.momentj == rhs.momentj &&
    lhs.momentk == rhs.momentk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tormach_controller::forceTorque_<ContainerAllocator1> & lhs, const ::tormach_controller::forceTorque_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tormach_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tormach_controller::forceTorque_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tormach_controller::forceTorque_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tormach_controller::forceTorque_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tormach_controller::forceTorque_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tormach_controller::forceTorque_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tormach_controller::forceTorque_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tormach_controller::forceTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b67716f2ec7095782e343db5f3543a2e";
  }

  static const char* value(const ::tormach_controller::forceTorque_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb67716f2ec709578ULL;
  static const uint64_t static_value2 = 0x2e343db5f3543a2eULL;
};

template<class ContainerAllocator>
struct DataType< ::tormach_controller::forceTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tormach_controller/forceTorque";
  }

  static const char* value(const ::tormach_controller::forceTorque_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tormach_controller::forceTorque_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 forcex\n"
"float32 forcey\n"
"float32 forcez\n"
"float32 momenti\n"
"float32 momentj\n"
"float32 momentk\n"
;
  }

  static const char* value(const ::tormach_controller::forceTorque_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tormach_controller::forceTorque_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.forcex);
      stream.next(m.forcey);
      stream.next(m.forcez);
      stream.next(m.momenti);
      stream.next(m.momentj);
      stream.next(m.momentk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct forceTorque_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tormach_controller::forceTorque_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tormach_controller::forceTorque_<ContainerAllocator>& v)
  {
    s << indent << "forcex: ";
    Printer<float>::stream(s, indent + "  ", v.forcex);
    s << indent << "forcey: ";
    Printer<float>::stream(s, indent + "  ", v.forcey);
    s << indent << "forcez: ";
    Printer<float>::stream(s, indent + "  ", v.forcez);
    s << indent << "momenti: ";
    Printer<float>::stream(s, indent + "  ", v.momenti);
    s << indent << "momentj: ";
    Printer<float>::stream(s, indent + "  ", v.momentj);
    s << indent << "momentk: ";
    Printer<float>::stream(s, indent + "  ", v.momentk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TORMACH_CONTROLLER_MESSAGE_FORCETORQUE_H
